/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Response;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-25T16:55:34.601Z")

@Api(value = "responses", description = "the responses API")
public interface ResponsesApi {

    @ApiOperation(value = "Create a new response", nickname = "createResponse", notes = "", tags={ "responses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully created"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/responses",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createResponse(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Response body);


    @ApiOperation(value = "Delete a response by assignmentId and questionId", nickname = "deleteQuestionResponse", notes = "", tags={ "responses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully deleted"),
        @ApiResponse(code = 404, message = "Assignment ID or Question ID not found") })
    @RequestMapping(value = "/responses/{assignmentId}/{questionId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteQuestionResponse(@ApiParam(value = "",required=true) @PathVariable("assignmentId") Long assignmentId,@ApiParam(value = "",required=true) @PathVariable("questionId") Long questionId);


    @ApiOperation(value = "Get all responses for an assignment by assignmentId", nickname = "getAssignmentResponses", notes = "", response = Response.class, responseContainer = "List", tags={ "responses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Response.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Assignment ID not found") })
    @RequestMapping(value = "/responses/{assignmentId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Response>> getAssignmentResponses(@ApiParam(value = "",required=true) @PathVariable("assignmentId") Long assignmentId);


    @ApiOperation(value = "Get a response by assignmentId and questionId", nickname = "getQuestionResponse", notes = "", response = Response.class, responseContainer = "List", tags={ "responses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Response.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Assignment ID or Question ID not found") })
    @RequestMapping(value = "/responses/{assignmentId}/{questionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Response> getQuestionResponse(@ApiParam(value = "",required=true) @PathVariable("assignmentId") Long assignmentId,@ApiParam(value = "",required=true) @PathVariable("questionId") Long questionId);


    @ApiOperation(value = "Update an existing response", nickname = "updateQuestionResponse", notes = "", tags={ "responses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully updated"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/responses",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateQuestionResponse(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Response body);

}
